name: Sync Logo and Files

on:
  schedule:
    - cron: '0 0/1 * * *'
  workflow_dispatch:  # 允许手动触发

jobs:
  sync-to-main:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout main branch
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT_TOKEN }}
        ref: main
        fetch-depth: 0

    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git config core.quotepath false  # 避免中文路径转义
        git config core.precomposeunicode true  # 处理unicode文件名

    - name: Clone private repository (main branch for files)
      run: |
        git clone -b main --single-branch https://${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository_owner }}/tvepg.git private-repo-main

    - name: Sync specific files from main branch
      run: |
        # 定义需要同步的文件数组
        files=(
          'snow_epg.xml'
          'snow_epg.xml.gz'
          'snow_epg.json'
          'README.md'
          'chuanliu.xml'
          'cqunicom.xml'
          'epgastro_mst.xml'
          # 'epgindonesia.xml'
          # 'epgsooka_mst.xml'
          # 'epgunifi.xml'
          'singtel.xml'
          'epghebei.xml'
        )
        
        # 同步每个文件
        changed_files=()
        for file in "${files[@]}"; do
          if [ -f "private-repo-main/$file" ]; then
            # 检查文件是否变化
            if ! cmp -s "private-repo-main/$file" "./$file" 2>/dev/null; then
              cp "private-repo-main/$file" "./$file"
              changed_files+=("$file")
              echo "✅ Synced: $file"
            else
              echo "ℹ️ No changes: $file"
            fi
          else
            echo "⚠️ File not found in main branch: $file"
          fi
        done
        
        # 记录变化的文件
        if [ ${#changed_files[@]} -gt 0 ]; then
          echo "========================================="
          echo "📝 Changed files: ${changed_files[*]}"
          echo "file_changes=true" >> $GITHUB_ENV
        else
          echo "file_changes=false" >> $GITHUB_ENV
        fi

    - name: Clean up main temp repo
      run: |
        rm -rf private-repo-main
        echo "✅ private-repo-main has been deleted"

    - name: Check for any changes in main
      run: |
        # 检查是否有任何未跟踪或修改的文件
        if git status --porcelain | grep -q .; then
          echo "✅ Changes detected in main, will commit"
          echo "has_changes=true" >> $GITHUB_ENV
        else
          echo "ℹ️ No changes detected in main"
          echo "has_changes=false" >> $GITHUB_ENV
        fi

    - name: Commit and push changes to main
      if: env.has_changes == 'true'
      run: |
        # 设置北京时区并获取时间
        export TZ='Asia/Shanghai'
        commit_time=$(date +'%Y-%m-%d %H:%M:%S %Z')
        
        git add .
        git commit -m "chore: sync files from private repository [北京时间: $commit_time]"
        git push origin main

    - name: Log completion for main
      run: |
        if [ "$has_changes" = "true" ]; then
          echo "✅ Files synced successfully to main branch"
        else
          echo "ℹ️ All files in main branch are already up to date"
        fi

  sync-logo-to-logoInfo:
    runs-on: ubuntu-latest
    needs: sync-to-main  # 确保在 main 分支同步完成后执行
    steps:
    - name: Checkout logo_info branch
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT_TOKEN }}
        ref: logo_info
        fetch-depth: 0

    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git config core.quotepath false  # 避免中文路径转义
        git config core.precomposeunicode true  # 处理unicode文件名

    - name: Clone private repository (main branch for logo)
      run: |
        git clone -b main --single-branch https://${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository_owner }}/tvepg.git private-repo-main-logo

    - name: Clone private repository (logo_info branch for other files)
      run: |
        git clone -b logo_info --single-branch https://${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository_owner }}/tvepg.git private-repo-logo-info

    - name: Create logo directory if not exists
      run: |
        if [ ! -d "logo" ]; then
          mkdir -p logo
          echo "✅ Created logo directory"
        fi

    - name: Sync logo files from main branch
      run: |
        if [ -d "private-repo-main-logo/logo" ]; then
          # 创建临时目录用于比对
          mkdir -p temp_logo_sync
          cp -r private-repo-main-logo/logo/* temp_logo_sync/ 2>/dev/null || true
          
          # 检查是否有变化
          has_changes=false
          
          # 检查新增或修改的文件
          for file in temp_logo_sync/*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              if [ -f "logo/$filename" ]; then
                if ! cmp -s "temp_logo_sync/$filename" "logo/$filename"; then
                  cp "temp_logo_sync/$filename" "logo/$filename"
                  echo "✅ Updated: $filename"
                  has_changes=true
                fi
              else
                cp "temp_logo_sync/$filename" "logo/$filename"
                echo "🆕 Added: $filename"
                has_changes=true
              fi
            fi
          done
          
          # 检查需要删除的文件
          for file in logo/*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              if [ ! -f "temp_logo_sync/$filename" ]; then
                rm "$file"
                echo "✅ Deleted: $filename"
                has_changes=true
              fi
            fi
          done
          
          # 清理临时目录
          rm -rf temp_logo_sync
          
          if [ "$has_changes" = true ]; then
            echo "========================================="
            echo "✅ Logo files synced with changes"
            echo "logo_changes=true" >> $GITHUB_ENV
          else
            echo "ℹ️ No logo changes detected"
            echo "logo_changes=false" >> $GITHUB_ENV
          fi
        else
          echo "⚠️ Logo folder not found in main branch"
          echo "logo_changes=false" >> $GITHUB_ENV
        fi

    - name: Sync and modify files from logo_info branch
      run: |
        # 定义需要替换链接再同步的文件数组
        files=(
          'README.md'
          'logo.json'
        )
        
        # 同步每个文件并进行链接替换
        file_changes=false
        for file in "${files[@]}"; do
          if [ -f "private-repo-logo-info/$file" ]; then
            # 创建临时文件用于处理
            temp_file="temp_$file"
            cp "private-repo-logo-info/$file" "$temp_file"
            
            # 替换文件中的链接
            sed -i 's|tvepg/main|myepg/logo_info|g' "$temp_file"
            
            # 检查文件是否变化
            if [ -f "./$file" ]; then
              if ! cmp -s "$temp_file" "./$file"; then
                cp "$temp_file" "./$file"
                echo "✅ Synced and modified: $file"
                file_changes=true
              else
                echo "ℹ️ No changes: $file"
              fi
            else
              cp "$temp_file" "./$file"
              echo "🆕 Added and modified: $file"
              file_changes=true
            fi
            
            # 清理临时文件
            rm -f "$temp_file"
          else
            echo "⚠️ File not found in logo_info branch: $file"
          fi
        done
        
        # 记录文件变化
        if [ "$file_changes" = true ]; then
          echo "file_content_changes=true" >> $GITHUB_ENV
        else
          echo "file_content_changes=false" >> $GITHUB_ENV
        fi

    - name: Sync other files from logo_info branch
      run: |
        # 定义需要同步但无需处理的其他文件数组（排除已经处理的文件）
        other_files=(
          'logo_112114.json'
          'logo_112114.md'
          'logo_fanmingming.json'
          'logo_fanmingming.md'
          'logo_taksssss.json'
          'logo_taksssss.md'
        )
        
        # 如果没有定义其他文件，则跳过
        if [ ${#other_files[@]} -eq 0 ]; then
          echo "ℹ️ No other files defined for sync"
          echo "other_files_changes=false" >> $GITHUB_ENV
          exit 0
        fi
        
        # 同步每个文件
        other_changes=false
        for file in "${other_files[@]}"; do
          if [ -f "private-repo-logo-info/$file" ]; then
            # 检查文件是否变化
            if [ -f "./$file" ]; then
              if ! cmp -s "private-repo-logo-info/$file" "./$file"; then
                cp "private-repo-logo-info/$file" "./$file"
                echo "✅ Synced: $file"
                other_changes=true
              else
                echo "ℹ️ No changes: $file"
              fi
            else
              cp "private-repo-logo-info/$file" "./$file"
              echo "🆕 Added: $file"
              other_changes=true
            fi
          else
            echo "⚠️ File not found in logo_info branch: $file"
          fi
        done
        
        # 记录变化
        if [ "$other_changes" = true ]; then
          echo "other_files_changes=true" >> $GITHUB_ENV
        else
          echo "other_files_changes=false" >> $GITHUB_ENV
        fi

    - name: Clean up temp repos
      run: |
        rm -rf private-repo-main-logo
        rm -rf private-repo-logo-info
        echo "✅ Temporary repositories have been deleted"

    - name: Check for any changes in logo_info
      run: |
        # 检查是否有任何变化（logo变化、文件内容变化或其他文件变化）
        if [ "$logo_changes" = "true" ] || [ "$file_content_changes" = "true" ] || [ "$other_files_changes" = "true" ]; then
          echo "✅ Changes detected in logo_info, will commit"
          echo "has_changes=true" >> $GITHUB_ENV
        else
          echo "ℹ️ No changes detected in logo_info"
          echo "has_changes=false" >> $GITHUB_ENV
        fi

    - name: Commit and push changes to logo_info
      if: env.has_changes == 'true'
      run: |
        # 设置北京时区并获取时间
        export TZ='Asia/Shanghai'
        commit_time=$(date +'%Y-%m-%d %H:%M:%S %Z')
        
        # 构建提交信息
        commit_message="chore: sync files to logo_info [北京时间: $commit_time]"
        
        # 添加详细的变更信息
        if [ "$logo_changes" = "true" ]; then
          commit_message="$commit_message\n- Logo files updated from main branch"
        fi
        
        if [ "$file_content_changes" = "true" ]; then
          commit_message="$commit_message\n- README.md and logo.json links updated"
        fi
        
        if [ "$other_files_changes" = "true" ]; then
          commit_message="$commit_message\n- Other files synced from logo_info branch"
        fi
        
        git add .
        git commit -m "$commit_message"
        git push origin logo_info

    - name: Log completion for logo_info
      run: |
        if [ "$has_changes" = "true" ]; then
          echo "✅ Logo and files synced successfully to logo_info branch"
        else
          echo "ℹ️ Logo and files in logo_info branch are already up to date"
        fi