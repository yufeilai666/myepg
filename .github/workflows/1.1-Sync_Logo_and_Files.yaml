name: Sync Logo and Files

on:
  schedule:
    - cron: '0 0/1 * * *'
  workflow_dispatch:  # 允许手动触发

jobs:
  sync-to-main:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout main branch
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT_TOKEN }}
        ref: main
        fetch-depth: 0

    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Clone private repository (main branch for files)
      run: |
        git clone -b main --single-branch https://${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository_owner }}/tvepg.git private-repo-main

    - name: Sync specific files from main branch
      run: |
        # 定义需要同步的文件数组
        files=(
          'snow_epg.xml'
          'snow_epg.xml.gz'
          'snow_epg.json'
          'README.md'
          'chuanliu.xml'
          'cqunicom.xml'
          'epgastro_mst.xml'
          # 'epgindonesia.xml'
          # 'epgsooka_mst.xml'
          # 'epgunifi.xml'
          'singtel.xml'
          'epghebei.xml'
        )
        
        # 同步每个文件
        changed_files=()
        for file in "${files[@]}"; do
          if [ -f "private-repo-main/$file" ]; then
            # 检查文件是否变化
            if ! cmp -s "private-repo-main/$file" "./$file" 2>/dev/null; then
              cp "private-repo-main/$file" "./$file"
              changed_files+=("$file")
              echo "✅ Synced: $file"
            else
              echo "ℹ️ No changes: $file"
            fi
          else
            echo "⚠️ File not found in main branch: $file"
          fi
        done
        
        # 记录变化的文件
        if [ ${#changed_files[@]} -gt 0 ]; then
          echo "📝 Changed files: ${changed_files[*]}"
          echo "file_changes=true" >> $GITHUB_ENV
        else
          echo "file_changes=false" >> $GITHUB_ENV
        fi

    - name: Clean up main temp repo
      run: |
        rm -rf private-repo-main

    - name: Check for any changes in main
      run: |
        # 检查是否有任何未跟踪或修改的文件
        if git status --porcelain | grep -q .; then
          echo "✅ Changes detected in main, will commit"
          echo "has_changes=true" >> $GITHUB_ENV
        else
          echo "ℹ️ No changes detected in main"
          echo "has_changes=false" >> $GITHUB_ENV
        fi

    - name: Commit and push changes to main
      if: env.has_changes == 'true'
      run: |
        # 设置北京时区并获取时间
        export TZ='Asia/Shanghai'
        commit_time=$(date +'%Y-%m-%d %H:%M:%S %Z')
        
        git add .
        git commit -m "chore: sync files from private repository [北京时间: $commit_time]"
        git push origin main

    - name: Log completion for main
      run: |
        if [ "$has_changes" = "true" ]; then
          echo "✅ Files synced successfully to main branch"
        else
          echo "ℹ️ All files in main branch are already up to date"
        fi

  sync-logo-to-logo-info:
    runs-on: ubuntu-latest
    needs: sync-to-main  # 确保在 main 分支同步完成后执行
    steps:
    - name: Checkout main branch
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.PAT_TOKEN }}
        ref: main
        # 使用浅克隆，只获取最新的提交
        fetch-depth: 1

    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Clone private repository (logo_info branch for logo)
      run: |
        git clone -b logo_info --single-branch https://${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository_owner }}/tvepg.git private-repo-logo

    - name: Checkout logo_info branch or create if not exists
      run: |
        # 检查logo_info分支是否存在
        if git ls-remote --exit-code --heads origin logo_info; then
          echo "ℹ️ logo_info分支已存在，切换到该分支"
          git fetch origin logo_info
          git checkout logo_info
        else
          echo "✅ 创建新的logo_info孤立分支"
          # 创建一个空的孤立分支
          git checkout --orphan logo_info
          # 清空工作区
          git rm -rf --quiet .
        fi

    - name: Sync logo files from private repository
      run: |
        # 确保logo目录存在
        mkdir -p logo
        
        if [ -d "private-repo-logo/logo" ]; then
          # 创建临时目录用于比对
          mkdir -p temp_logo_sync
          cp -r private-repo-logo/logo/* temp_logo_sync/ 2>/dev/null || true
          
          # 检查是否有变化
          has_changes=false
          
          # 检查新增或修改的文件
          for file in temp_logo_sync/*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              if [ -f "logo/$filename" ]; then
                if ! cmp -s "temp_logo_sync/$filename" "logo/$filename"; then
                  cp "temp_logo_sync/$filename" "logo/$filename"
                  echo "✅ Updated: $filename"
                  has_changes=true
                fi
              else
                cp "temp_logo_sync/$filename" "logo/$filename"
                echo "✅ Added: $filename"
                has_changes=true
              fi
            fi
          done
          
          # 检查需要删除的文件
          for file in logo/*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              if [ ! -f "temp_logo_sync/$filename" ]; then
                rm "$file"
                echo "✅ Deleted: $filename"
                has_changes=true
              fi
            fi
          done
          
          # 清理临时目录
          rm -rf temp_logo_sync
          
          if [ "$has_changes" = true ]; then
            echo "========================================="
            echo "✅ Logo files synced with changes"
            echo "logo_changes=true" >> $GITHUB_ENV
          else
            echo "ℹ️ No logo changes detected"
            echo "logo_changes=false" >> $GITHUB_ENV
          fi
        else
          echo "⚠️ Logo folder not found in logo_info branch"
          echo "logo_changes=false" >> $GITHUB_ENV
        fi

    - name: Clean up logo temp repo
      run: |
        rm -rf private-repo-logo

    - name: Commit and push changes to logo_info branch
      if: env.logo_changes == 'true'
      run: |
        git config --local user.name "github-actions[bot]"
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        
        # 只添加logo文件夹
        git add logo/
        
        # 检查是否有更改
        if git diff --staged --quiet; then
          echo "没有更改需要提交"
        else
          # 设置北京时区并获取时间
          export TZ='Asia/Shanghai'
          commit_time=$(date +'%Y-%m-%d %H:%M:%S %Z')
          
          # 使用与update-logo-list.yaml相似的提交信息格式
          git commit -m "Update logo files [skip ci]: $commit_time"
          git push origin logo_info
        fi

    - name: Log completion for logo_info
      run: |
        if [ "$logo_changes" = "true" ]; then
          echo "✅ Logo synced successfully to logo_info branch"
        else
          echo "ℹ️ Logo in logo_info branch is already up to date"
        fi