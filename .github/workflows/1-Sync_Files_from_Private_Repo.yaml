name: 1 Sync Files from Private Repo

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0/1 * * *'

jobs:
  sync:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout current repository
      uses: actions/checkout@v4
      
    - name: Sync files from private repository
      id: sync_files
      run: |
        # 需要同步的文件列表 - 使用数组形式，支持注释
        files=(
          'snow_epg.xml'
          'snow_epg.xml.gz'
          # 'snow_epg.json'
          'README.md'
          'chuanliu.xml'
          'cqunicom.xml'
          'epgastro_mst.xml'
          # 'epgindonesia.xml'
          # 'epgsooka_mst.xml'
          # 'epgunifi.xml',
          'singtel.xml'
          'epghebei.xml'
        )
        
        changed_files=()
        failed_files=()
        success_files=()
        
        echo "Starting sync process..."
        echo "Files to process: ${#files[@]}"
        
        for file in "${files[@]}"; do
          # 跳过注释行（以#开头的元素）
          if [[ $file =~ ^# ]]; then
            echo "ℹ️ Skipping commented file: $file"
            continue
          fi
          
          echo "========================================="
          echo "ℹ️ Processing: $file"
          
          # 创建临时文件来下载内容
          temp_file=$(mktemp)
          http_code=$(curl -s -o "$temp_file" -w "%{http_code}" -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            -H "Accept: application/vnd.github.v3.raw" \
            "https://api.github.com/repos/${{ github.repository_owner }}/tvepg/contents/$file")
          
          if [ "$http_code" -eq 200 ]; then
            # 检查文件是否为空
            if [ -s "$temp_file" ]; then
              file_size=$(wc -c < "$temp_file")
              
              # 检查文件内容是否发生变化
              if [ -f "$file" ] && cmp -s "$temp_file" "$file"; then
                echo "ℹ️ File unchanged: $file (size: $file_size bytes)"
                rm -f "$temp_file"
                success_files+=("$file")
              else
                echo "✅ File changed: $file (size: $file_size bytes)"
                mv "$temp_file" "$file"
                changed_files+=("$file")
                success_files+=("$file")
              fi
            else
              echo "❌ Downloaded file is empty: $file"
              rm -f "$temp_file"
              failed_files+=("$file")
            fi
          else
            echo "❌ Failed to download: $file (HTTP code: $http_code)"
            rm -f "$temp_file"
            failed_files+=("$file")
          fi
        done
        
        # 输出结果
        echo "========================================="
        echo "ℹ️ SYNC RESULT:"
        echo "  ┖ ✅ Successfully processed: ${#success_files[@]} files"
        echo "  ┖ 📝 Actually changed: ${#changed_files[@]} files" 
        echo "  ┖ ❌ Failed to download: ${#failed_files[@]} files"
        
        if [ ${#changed_files[@]} -gt 0 ]; then
          echo "  ┖ 🎉 Changed files: ${changed_files[*]}"
        fi
        
        if [ ${#failed_files[@]} -gt 0 ]; then
          echo "  ┖ ⚠️ Failed files: ${failed_files[*]}"
        fi
        
        # 设置输出 - 只在实际有变化的文件时才标记为 changed
        if [ ${#changed_files[@]} -gt 0 ]; then
          echo "changed_files=true" >> $GITHUB_OUTPUT
          echo "changed_files_count=${#changed_files[@]}" >> $GITHUB_OUTPUT
          echo "changed_files_list=${changed_files[*]}" >> $GITHUB_OUTPUT
        else
          echo "changed_files=false" >> $GITHUB_OUTPUT
          echo "changed_files_count=0" >> $GITHUB_OUTPUT
        fi
        
        echo "success_files_count=${#success_files[@]}" >> $GITHUB_OUTPUT
        echo "failed_files_count=${#failed_files[@]}" >> $GITHUB_OUTPUT
        
    - name: Commit and push changes
      if: steps.sync_files.outputs.changed_files_count > 0
      env:
        CHANGED_FILES_LIST: ${{ steps.sync_files.outputs.changed_files_list }}
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
        # 获取北京时间
        BEIJING_TIME=$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')
        
        echo "ℹ️ Changed files: $CHANGED_FILES_LIST"
        echo "========================================="
        
        # 添加所有更改的文件
        IFS=' ' read -ra FILES <<< "$CHANGED_FILES_LIST"
        for file in "${FILES[@]}"; do
          if [ -f "$file" ] && [ -s "$file" ]; then
            file_size=$(wc -c < "$file")
            echo "ℹ️ Adding $file to git (size: $file_size bytes)"
            git add "$file"
          fi
        done
        
        echo "========================================="
        # 使用多个 -m 参数来创建多行提交信息
        git commit -m "sync: update files from tvepg at $BEIJING_TIME" \
          -m "  - Updated: $CHANGED_FILES_LIST" \
          -m "  - Auto-sync from private repository"
        
        echo "Pushing changes to repository..."
        git push
        
        echo "========================================="
        echo "✅ Successfully synced and committed changes"
        
    - name: No changes detected
      if: steps.sync_files.outputs.changed_files_count == 0
      run: |
        echo "========================================="
        echo "ℹ️ SYNC COMPLETED: No new changes detected"
        
        if [ "${{ steps.sync_files.outputs.success_files_count }}" -eq 0 ] && [ "${{ steps.sync_files.outputs.failed_files_count }}" -gt 0 ]; then
          echo "❌ All file downloads failed"
          exit 1
        else
          echo "✅ All files are already in sync"
        fi